"use client";

import { useState, useEffect, useCallback } from "react";
import Link from "next/link";
import { motion, AnimatePresence } from "framer-motion";
import { FiMenu, FiX, FiSun, FiMoon } from "react-icons/fi";

const NAV = [
  { name: "Home", href: "/" },
  { name: "About", href: "about" },
  { name: "Services", href: "services" },
  { name: "Blog", href: "blogs" },
  { name: "Contact", href: "contact" },
];

export default function Navbar() {
  const [isOpen, setIsOpen] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [scrolled, setScrolled] = useState(false);

  // pick up persisted theme on mount
  useEffect(() => {
    const pref =
      localStorage.getItem("theme") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
    const isDark = pref === "dark";
    setDarkMode(isDark);
    document.documentElement.classList.toggle("dark", isDark);
  }, []);

  useEffect(() => {
    const onScroll = () => setScrolled(window.scrollY > 10);
    onScroll();
    window.addEventListener("scroll", onScroll, { passive: true });
    return () => window.removeEventListener("scroll", onScroll);
  }, []);

  const toggleTheme = () => {
    const next = !darkMode;
    setDarkMode(next);
    document.documentElement.classList.toggle("dark", next);
    localStorage.setItem("theme", next ? "dark" : "light");
  };

  // Smooth-scroll to in-page section and close mobile menu
  const onNavClick = useCallback((e, href) => {
    if (!href?.startsWith("#")) return; // normal nav for non-hash links
    e.preventDefault();
    const id = href.slice(1);
    const el = document.getElementById(id);
    if (el) {
      // offset for sticky header height
      const headerOffset = 64; // adjust if your header height differs
      const y = el.getBoundingClientRect().top + window.scrollY - headerOffset;
      window.scrollTo({ top: y, behavior: "smooth" });
    }
    setIsOpen(false);
  }, []);

  return (
    <motion.nav
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5 }}
      className={`fixed inset-x-0 top-0 z-50 transition-all duration-300 ${
        scrolled ? "backdrop-blur-sm shadow-lg border-b border-white/20" : "bg-transparent"
      }`}
    >
      <div className="mx-auto max-w-7xl px-6 py-4">
        <div className="flex items-center justify-between">
          {/* Logo */}
          <Link href="/" onClick={(e) => onNavClick(e, "/")} className="flex items-center">
            <motion.span
              whileHover={{ scale: 1.05 }}
              className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-300 via-cyan-400 to-purple-500"
            >
             fahracity
            </motion.span>
          </Link>

          {/* Desktop nav */}
          <div className="hidden md:flex items-center gap-8">
            {NAV.map((link) => (
              <Link
                key={link.href}
                href={link.href}
                onClick={(e) => onNavClick(e, link.href)}
                className="relative text-blue-100 hover:text-white transition-colors group"
              >
                {link.name}
                <motion.span
                  className="pointer-events-none absolute -bottom-0.5 left-0 h-0.5 w-0 bg-teal-400 transition-all duration-300 group-hover:w-full"
                  initial={{ width: 0 }}
                  whileHover={{ width: "100%" }}
                />
              </Link>
            ))}

            {/* Theme toggle */}
            {/* <button
              onClick={toggleTheme}
              className="p-2 rounded-full bg-teal-800 text-teal-200 hover:bg-teal-700 transition-colors"
              aria-label="Toggle dark mode"
              type="button"
            >
              {darkMode ? <FiSun /> : <FiMoon />}
            </button> */}
          </div>

          {/* Mobile buttons */}
          <div className="md:hidden flex items-center gap-3">
            {/* <button
              onClick={toggleTheme}
              className="p-2 rounded-full bg-teal-800 text-teal-200 hover:bg-teal-700 transition-colors"
              aria-label="Toggle dark mode"
              type="button"
            >
              {darkMode ? <FiSun /> : <FiMoon />}
            </button> */}

            <button
              onClick={() => setIsOpen((s) => !s)}
              className="p-2 rounded-full bg-teal-800 text-teal-200 hover:bg-teal-700 transition-colors"
              aria-label="Toggle menu"
              type="button"
            >
              {isOpen ? <FiX size={24} /> : <FiMenu size={24} />}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.25 }}
            className="md:hidden overflow-hidden bg-teal-900/95 backdrop-blur-sm"
          >
            <div className="mx-auto max-w-7xl px-6 py-4">
              <div className="flex flex-col space-y-2">
                {NAV.map((link) => (
                  <Link
                    key={link.href}
                    href={link.href}
                    onClick={(e) => onNavClick(e, link.href)}
                    className="text-teal-100 hover:text-white py-2 px-4 rounded-lg hover:bg-teal-800 transition-colors"
                  >
                    {link.name}
                  </Link>
                ))}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.nav>
  );
}
